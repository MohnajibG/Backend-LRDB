const express = require("express");
const Order = require("../models/Order");
const isAuthenticated = require("../middleware/isAuthenticated"); // Middleware pour v√©rifier l'authentification
const isAdmin = require("../middleware/isAdmin"); // Middleware pour v√©rifier les droits d'administration

const router = express.Router();

// Route pour cr√©er une nouvelle commande
router.post("/order", async (req, res) => {
  try {
    const { items, totalPrice, etat } = req.body;

    // R√©cup√©rer la derni√®re commande pour d√©terminer le dernier num√©ro de commande
    const lastOrder = await Order.findOne().sort({ orderNumber: -1 });

    // Cr√©er la nouvelle commande avec le num√©ro de commande incr√©ment√©
    const newOrderNumber = lastOrder ? lastOrder.orderNumber + 001 : 001;

    // Cr√©er une nouvelle commande avec les donn√©es fournies
    const newOrder = new Order({
      orderNumber: newOrderNumber, // Num√©ro de la commande
      etat, // √âtat de la commande
      items: items.map((item) => ({
        name: item.name, // Nom de l'article
        quantity: item.quantity, // Quantit√© de l'article
        price: item.price, // Prix de l'article
      })),
      totalPrice, // Prix total de la commande
    });

    // Enregistrer la nouvelle commande dans la base de donn√©es
    await newOrder.save();

    // Retourner une r√©ponse indiquant que la commande a √©t√© enregistr√©e avec succ√®s
    res.status(201).json({
      message: "Commande enregistr√©e ü´°",
      orderNumber: newOrder.orderNumber, // Num√©ro de la commande enregistr√©e
      id: newOrder.id, // ID de la commande enregistr√©e
    });
  } catch (error) {
    // Gestion des erreurs
    res.status(500).json({ message: error.message }); // Retourner une erreur 500 en cas de probl√®me
  }
});

// Route pour obtenir une commande par son ID
router.get("/order/:id", async (req, res) => {
  try {
    const orderId = req.params.id;

    const order = await Order.findById(orderId); // Trouver la commande par son ID

    // V√©rifier si la commande existe
    if (!order) {
      return res.status(404).json({ message: "Commande non trouv√©e" }); // Retourner une erreur 404 si non trouv√©e
    }

    res.status(200).json(order); // Retourner la commande trouv√©e
  } catch (error) {
    // Gestion des erreurs
    res.status(500).json({ message: error.message }); // Retourner une erreur 500 en cas de probl√®me
  }
});

router.get("/orders", isAuthenticated, isAdmin, async (req, res) => {
  try {
    // R√©cup√®re toutes les commandes dans la base de donn√©es
    const orders = await Order.find();
    // Renvoie les commandes en format JSON avec un code 200 (succ√®s)
    res.status(200).json(orders);
  } catch (error) {
    // En cas d'erreur, renvoie un message d'erreur avec un code 500 (erreur interne)
    res.status(500).json({ message: error.message });
  }
});

// Route pour mettre √† jour le statut d'une commande (admin uniquement)
router.put("/order/:id", isAuthenticated, isAdmin, async (req, res) => {
  try {
    // Mettre √† jour l'√©tat de la commande en fonction de l'ID fourni
    const statusOrder = await Order.findByIdAndUpdate(
      req.params.id,
      { etat: true }, // Changer l'√©tat √† true (peut √™tre modifi√© selon la logique souhait√©e)
      { new: true } // Retourner la commande mise √† jour
    );

    // V√©rifier si la commande existe
    if (!statusOrder) {
      return res.status(404).json({ message: "Commande non trouv√©e" }); // Retourner une erreur 404 si non trouv√©e
    }

    res
      .status(200)
      .json({ message: "Statut de commande modifi√©", statusOrder }); // Retourner la commande mise √† jour
  } catch (error) {
    // Gestion des erreurs
    res.status(500).json({ message: error.message }); // Retourner une erreur 500 en cas de probl√®me
  }
});

// Route pour supprimer une commande (admin uniquement)
router.delete("/order/:id", isAuthenticated, isAdmin, async (req, res) => {
  try {
    // Supprimer la commande par son ID
    const deleteOrder = await Order.findByIdAndDelete(req.params.id);

    // V√©rifier si la commande existe
    if (!deleteOrder) {
      return res.status(404).json({ message: "Commande non trouv√©e" }); // Retourner une erreur 404 si non trouv√©e
    }

    res
      .status(200)
      .json({ message: "Commande supprim√©e avec succ√®s", deleteOrder }); // Retourner une confirmation de suppression
  } catch (error) {
    // Gestion des erreurs
    res.status(500).json({ message: error.message }); // Retourner une erreur 500 en cas de probl√®me
  }
});

module.exports = router; // Exporter le routeur pour l'utiliser dans d'autres parties de l'application
